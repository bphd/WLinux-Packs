#!/bin/bash

RESPONSE=""
CURDUR=""
TMPDIR=""
VERSION="1.1.22a"

# functions

## core functions

function welcomeprompt {
whiptail --title "Welcome to WLinux" --msgbox "Thank you for supporting sustainable independent open-source development.\n
WLinux comes with a core set of packages installed. This setup allows\
you to install some selected packages for WLinux and configure optional settings. \
Many more packages are available via the apt package management system.\n
To learn more about apt you should use man, try typing $ man apt\
" 15 80
}

function continueprompt {
if (whiptail --title "Continue setup?" --yesno "Would you like to continue wlinux-setup?" 8 50) then
    echo "Starting wlinux-setup."
else
    echo "Exiting wlinux-setup"
    echo "You may run the script again any time by running: $ wlinux-setup"
    exit 0
fi
}

function updatescriptprompt {

if (whiptail --title "Upgrade setup?" --yesno "Would you like to download and restart with the most recent version of this setup? This is recommended periodically to get new features and fixes." 10 75) then
    createtmp
    echo "Backing up old /etc/setup to /etc/setup.old"
    sudo cp /etc/setup /etc/setup.old
    echo "Getting fresh setup from GitHub"
    wget https://raw.githubusercontent.com/WhitewaterFoundry/WLinux/master/linux_files/setup
    sudo cp setup /etc/setup
    echo "Cleaning up."
    rm ~/.firstrun
    clear
    echo "Running updated wlinux-setup"
    bash /etc/setup
    exit 0
else
    whiptail --title "Release setup" --msgbox "Continuing with built-in setup. If you encounter problems, please try updating." 8 85
fi

}

function securitypatches {
echo "No WSL hotfixes required."

}

function createtmp {
    echo "Saving current directory as \$CURDIR"
    CURDIR=$(pwd)
    TMPDIR=$(mktemp -d)
    echo "Going to \$TMPDIR: $TMPDIR"
    cd $TMPDIR
}

function cleantmp {
    echo "Returning to $CURDIR"
    cd $CURDIR
    echo "Cleaning up $TMPDIR"
    sudo rm -r $TMPDIR  # need to add sudo here because git clones leave behind write-protected files
}

function byemessage {
    whiptail --title "Setup is complete." --msgbox "You may run the setup script again any time by typing $ wlinux-setup\n\nYou may open a browser link to get help any time by typing: $ wlinux-help" 10 100
    exit 0
}

## internationalization

function languageprompt {
if (whiptail --title "Language" --yesno "Would you like to configure for international languages?" 8 45) then
    echo "Running $ dpkg-reconfigure locales"
    sudo dpkg-reconfigure locales
fi
}

## package index

function installmenu {

CHOICE=$(
whiptail --title "WLinux GUI Setup" --checklist --separate-output "Hand-curated add-ons:" 20 100 12 \
    "EXPLORER" "Enable right-click on folders in Windows Explorer to open them in WLinux" off \
    "SHELLS" "Install and configure default shells from bash, zsh, csh, and fish" off \
    "EDITORS" "Install text editors neovim, emacs, or Visual Studio Code (requires X)" off \
    "PYTHONPI" "Install Python 3.7 and download and install latest PyPi" off \
    "NODEJS" "Install Node.js and npm" off \
    "GO" "Install the latest Go" off \
    "RUBY" "Install Ruby using rbenv and optionally install Rails" off \
    "DOTNET" "Install latest .NET Core SDK from Microsoft and Nuget" off \
    "POWERSHELL" "Install PowerShell for Linux and Azure CLI tools" off \
    "GUI" "Install the basic libraries needed for most GUI apps" off \
    "LANGUAGE" "Change default language and keyboard setting in WSL" off 3>&1 1>&2 2>&3
)

echo "Selected:" $CHOICE

if [[ $CHOICE == *"LANGUAGE"* ]] ; then
    echo "LANGUAGE"
    languageprompt
fi

if [[ $CHOICE == *"EXPLORER"* ]] ; then
  echo "EXPLORER"
  explorerintegration
fi

if [[ $CHOICE == *"SHELLS"* ]] ; then
  echo "SHELLS"
  installandsetshell
fi

if [[ $CHOICE == *"EDITORS"* ]] ; then
  echo "EDITORS"
  editormenu
fi 

if [[ $CHOICE == *"PYTHON"* ]] ; then
  echo "PYTHON"
  pythoninstall
fi

if [[ $CHOICE == *"NODE"* ]] ; then
  echo "NODE"
  nodeinstall
fi

if [[ $CHOICE == *"GO"* ]] ; then
  echo "GO"
  goinstall
fi

if [[ $CHOICE == *"RUBY"* ]] ; then
  echo "RUBY"
  rubyinstall
fi

if [[ $CHOICE == *"DOTNET"* ]] ; then
  echo "DOTNET"
  dotnetinstall
fi

if [[ $CHOICE == *"POWERSHELL"* ]] ; then
  echo "POWERSHELL"
  powershellinstall
  azurecliinstall
fi

if [[ $CHOICE == *"GUI"* ]] ; then
    echo "GUI"
    basicguiinstall
fi
}

function updateupgrade {
echo "Updating apt package index from repositories: $ sudo apt update"
sudo apt update
echo "Applying available package upgrades from repositories: $ sudo apt upgrade -y"
sudo apt upgrade -y
echo "Removing unnecessary packages: $ sudo apt autoremove -y"
sudo apt autoremove -y
}


## submenus

function editormenu {

EDITORCHOICE=$(
whiptail --title "Editor Menu" --checklist --separate-output "Custom editors (nano and vi included):" 12 55 5 \
    "NEOVIM" "Neovim" off \
    "EMACS" "Emacs" off \
    "CODE" "Visual Studio Code (requires X)" off 3>&1 1>&2 2>&3
)

if [[ $EDITORCHOICE == *"NEOVIM"* ]] ; then
    neoviminstall
fi

if [[ $EDITORCHOICE == *"EMACS"* ]] ; then
  emacsinstall
fi

if [[ $EDITORCHOICE == *"CODE"* ]] ; then
  codeinstall
fi

}


## package sets

### shells

function installandsetshell () {
echo "Entering shell setup"
options=("zsh" "fish" "csh")
prompt="Check a shell by entering it's corresponding number (again to uncheck, ENTER when done): "
msg=""

shellmenu () {
    echo "bash is the default shell included in WLinux. You may select additional shells to install here."
    for i in ${!options[@]}; do 
        printf "%3d%s) %s\n" $((i+1)) "${choices[i]:- }" "${options[i]}"
    done
    [[ "$msg" ]] && echo "$msg"; :
}

while clear && shellmenu && read -rp "$prompt" num && [[ "$num" ]]; do
    [[ "$num" != *[![:digit:]]* ]] &&
    (( num > 0 && num <= ${#options[@]} )) ||
    { msg="Invalid option: $num"; continue; }
    ((num--)); msg="${options[num]} was ${choices[num]:+un}checked"
    [[ "${choices[num]}" ]] && choices[num]="" || choices[num]="+"
done

toselect=("bash")
msg="1"
for i in ${!options[@]}; do 
    if [[ "${choices[i]}" ]]
    then
        toselect+=("${options[i]}")
        echo "Installing ${options[i]}..."
        sudo apt install ${options[i]} -y	
	
	if [ ${options[i]} = "zsh" ]
	then
        createtmp
        whiptail --title "zsh" --msgbox "After zsh is installed and launched, type 'exit' and ENTER to return to wlinux-setup" 10 60
	    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
	cleantmp
	fi
	
	if [ ${options[i]} = "fish" ]
	then
        createtmp
	whiptail --title "fish" --msgbox "After fish is installed and launched, type 'exit' and ENTER to return to wlinux-setup" 10 60
        echo "NOTE: "
	    curl -L https://get.oh-my.fish | fish
        cleantmp
    fi    
            
    msg="0"
    fi
done
if [[ "$msg" == "1" ]]
then
    echo "No additional shell selected, continuing setup..."
else
    echo "Set default shell:"
    for i in ${!toselect[@]}; do 
        printf "%3d) %s\n" $((i)) "${toselect[i]}"
    done
    passed="1"
    while [[ "$passed" == "1" ]]
    do
        read -rp "Type a number and enter: " opt
        if [[ "$opt" != *[![:digit:]]* ]] && (( opt < 0 && opt >= ${#toselect[@]} ))
        then
            echo "Invalid option: $opt"
        elif [[ "$opt" == "" ]]
        then
            echo "You must select a default shell."
        else
            passed="0"
        fi
    done
    echo "Setting ${toselect[$opt]} as default using chsh."
    chsh -s $(which ${toselect[$opt]})
fi
}

### editors

function neoviminstall {
if (whiptail --title "NEOVIM" --yesno "Would you like to download and install neovim?" 8 70) then
    echo "Installing a recent neovim and building tools from Debian testing: $ sudo apt -t testing install neovim build-essential"
    sudo apt -t testing install neovim build-essential -y
else
    echo "Skipping NEOVIM"
fi
}

function emacsinstall {
if (whiptail --title "EMACS" --yesno "Would you like to download and install emacs?" 8 70) then
    echo "Installing emacs: $ sudo apt install emacs -y"
    sudo apt install emacs -y
else
    echo "Skipping EMACS"
fi
}

function codeinstall {
if (whiptail --title "CODE" --yesno "Would you like to download and install Microsoft Code?" 8 70) then
    echo "Installing CODE"
    createtmp
    echo "Downloading and unpacking Microsoft's apt repo key with curl and gpg"
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg 
    echo "Moving Microsoft's apt repo key into place with mv"
    sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg 
    echo "Adding Microsoft apt repo to /etc/apt/sources.list.d/vscode.list with echo"
    sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list' 
    updateupgrade
    echo "Installing code with dependencies: $ sudo apt install code libxss1 libasound2 -y"
    sudo apt install code libxss1 libasound2 -y
    cleantmp
else
    echo "Skipping CODE"
fi  
}

### gui apps and related

function basicguiinstall {

whiptail --title "Note about GUI Apps" --msgbox "Use of GUI applications on WLinux requires an X server running on Windows.\n\nExamples:\n\nX410\nVcXsrv\nXming" 15 60

if (whiptail --title "X410" --yesno "Would you like to view a link to X410 on the Microsoft Store?" 8 70) then
    echo "Running $ wslview <link>"
    wslview https://afflnk.microsoft.com/c/1291904/433017/7593?u=https%3A%2F%2Fwww.microsoft.com%2Fen-us%2Fp%2Fx410%2F9nlp712zmn9q%23activetab%3Dpivot%3Aoverviewtab
else
    echo "Skipping X410"
fi

if (whiptail --title "GUI Libraries" --yesno "Would you like to view a base set of libraries for GUI applications?" 8 75) then
    echo "Installing GUILIB"
    echo "$ apt install xclip gnome-themes-standard gtk2-engines-murrine dbus dbus-x11 -y"
    sudo apt install xclip gnome-themes-standard gtk2-engines-murrine dbus dbus-x11 -y
    echo "Configuring dbus if you already had it installed. If not, you might see some errors, and that is okay."
    sudo sed -i 's$<listen>.*</listen>$<listen>tcp:host=localhost,port=0</listen>$' /etc/dbus-1/session.conf
    sudo sed -i 's$<auth>EXTERNAL</auth>$<auth>ANONYMOUS</auth>$' /etc/dbus-1/session.conf
    sudo sed -i 's$</busconfig>$<allow_anonymous/></busconfig>$' /etc/dbus-1/session.conf
else
    echo "Skipping GUILIB"
fi

if (whiptail --title "GUI Libraries" --yesno "Would you like to configure Qt and GDK for HiDPI displays? (Experimental)" 8 85) then
    echo "Installing HiDPI"
    export QT_SCALE_FACTOR=2
    export GDK_SCALE=2
    sudo sh -c 'echo "QT_SCALE_FACTOR=2" >> /etc/profile'
    sudo sh -c 'echo "GDK_SCALE=2" >> /etc/profile'
else
    echo "Skipping HiDPI"
fi
}

### dev environments

function pythoninstall {
if (whiptail --title "PYTHON" --yesno "Would you like to download and install Python 3.7, IDLE, and the pip package manager?" 8 90) then
    echo "Installing PYTHON"
    createtmp
    sudo apt update
    sudo apt -t testing install build-essential python3.7 python3.7-distutils idle-python3.7 -y
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python3 get-pip.py --user --no-warn-script-location
    export PATH="$PATH:/home/~/.local/bin"
    pip3 install -U pip
    cleantmp
else
    echo "Skipping PYTHON"
fi
}

function nodeinstall {
if (whiptail --title "NODE" --yesno "Would you like to download and install NodeJS using n and the npm package manager?" 8 80) then
    echo "Installing NODE"
    createtmp
    sudo apt install n build-essential -y 
    sudo n latest
    curl -0 -L https://npmjs.com/install.sh | sudo sh
    cleantmp

        if (whiptail --title "YARN" --yesno "Would you like to download and install the Yarn package manager? (optional)" 8 80) then
            echo "Installing YARN"
            createtmp
            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update && sudo apt-get install yarn --no-install-recommends
            cleantmp
        else
            echo "Skipping YARN"
        fi
else
    echo "Skipping NODE"
fi
}

function goinstall {
if (whiptail --title "GO" --yesno "Would you like to download and install the latest Go from Google?" 8 70) then
    createtmp
    echo "Downloading Go using wget."
    wget https://dl.google.com/go/go1.11.1.linux-amd64.tar.gz
    echo "Unpacking tar binaries to /usr/local/go."
    sudo tar -C /usr/local -xzf go*.linux-amd64.tar.gz
    echo "Creating ~/go/ for your projects."
    mkdir ~/go/
    echo "Setting Go environment variables GOROOT, GOPATH, and adding Go to PATH with export."
    export GOROOT=/usr/local/go
    export GOPATH=$HOME/go/
    export PATH=$GOPATH/bin:$GOROOT/bin:/usr/local/go/bin:$PATH
    echo "Saving Go environment variables to /etc/profile so they will persist."
    sudo sh -c 'echo "export GOROOT=/usr/local/go" >> /etc/profile'
    sudo sh -c 'echo "export GOPATH=$HOME/go/" >> /etc/profile'
    sudo sh -c 'echo "export PATH=$GOPATH/bin:$GOROOT/bin:/usr/local/go/bin:$PATH" >> /etc/profile'
    cleantmp
else
    echo "Skipping GO"
fi
}

function rubyinstall {

if (whiptail --title "RUBY" --yesno "Would you like to download and install Ruby using rbenv?" 8 65) then
    echo "Installing RUBY"
    echo "Installing Ruby dependencies"
    sudo apt-get -t testing install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev -y
    createtmp

    echo "Getting rbenv"
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv

    echo "Configuring rbenv"
    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
    echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
    echo 'eval "$(rbenv init -)"' >> ~/.bashrc
    source ~/.bashrc

    echo "Getting ruby-build"
    git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build

    echo "Configuring ruby-build"
    export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
    echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
    source ~/.bashrc

    echo "Installing Ruby using rbenv"
    rbenv install 2.5.1 --verbose
    rbenv global 2.5.1
    echo "Checking ruby version"
    ruby -v
    echo "Installing bundler using gem"
    gem install bundler
    echo "Rehashing rbenv"
    rbenv rehash
    cleantmp
else
    echo "Skipping RUBY"
fi

if (whiptail --title "RAILS" --yesno "Would you like to download and install Rails from NodeJS?" 8 65) then
    echo "Installing RAILS"
    sudo apt-get -t testing install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev
    createtmp
    nodeinstall
    gem install rails -v 5.2.0
    rbenv rehash
    cleantmp
else
    echo "Skipping RAILS"
fi
}

function dotnetinstall {

if (whiptail --title "DOTNET" --yesno "Would you like to download and install the .Net Core SDK for Linux?" 8 75) then
    echo "Installing DOTNET"
    createtmp
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    sudo cp microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
    rm microsoft.gpg
    sudo sh -c 'echo "deb https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" > /etc/apt/sources.list.d/microsoft.list' 
    sudo apt update
    sudo apt upgrade -y
    sudo apt install dotnet-sdk-2.1 -y
    cleantmp

    if (whiptail --title "NUGET" --yesno "Would you like to download and install NuGet?" 8 65) then
        echo "Installing NuGet"
        sudo apt install nuget -y
    else
        echo "Skipping NUGET"
    fi

else
    echo "Skipping DOTNET"
fi
}

function powershellinstall {

if (whiptail --title "POWERSHELL" --yesno "Would you like to download and install Powershell?" 8 70) then
    echo "Installing POWERSHELL"
    createtmp
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    sudo cp microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
    rm microsoft.gpg
    sudo sh -c 'echo "deb https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" > /etc/apt/sources.list.d/microsoft.list' 
    sudo apt update
    sudo apt upgrade -y
    sudo apt install powershell -y
    cleantmp
else
    echo "Skipping POWERSHELL"
fi
}

### enhancements

function fzfinstall {

if (whiptail --title "FZF" --yesno "Would you like to download and install command line finder fzf?" 8 80) then
    echo "Installing FZF"
    cd ~
    git clone --depth 1 https://github.com/junegunn/fzf.git
    cd fzf
    ./install
else
    echo "Skipping FZF"
fi
}

function explorerintegration {
if (whiptail --title "EXPLORER" --yesno "Would you like to enable Windows Explorer shell integration?" 8 75) then
    echo "Enabling Windows Explorer shell integration."
    createtmp
    cat << 'EOF' >> Install.reg
    Windows Registry Editor Version 5.00
    [HKEY_CURRENT_USER\Software\Classes\Directory\Background\shell\WLinux]
    @="Open with WLinux"
    [HKEY_CURRENT_USER\Software\Classes\Directory\Background\shell\WLinux\command]
    @="wlinux.exe run \"cd \\\"$(wslupath \\\"%V\\\")\\\" && $(getent passwd $LOGNAME | cut -d: -f7)\""
    [HKEY_CURRENT_USER\Software\Classes\Directory\shell\WLinux]
    @="Open with WLinux"
    [HKEY_CURRENT_USER\Software\Classes\Directory\shell\WLinux\command]
    @="wlinux.exe run \"cd \\\"$(wslupath \\\"%V\\\")\\\" && $(getent passwd $LOGNAME | cut -d: -f7)\""
EOF
    cp Install.reg $(wslupath -T)/Install.reg
    cmd.exe /C "Reg import %TEMP%\Install.reg"
    cleantmp
 else
    echo "Disabling Windows Explorer shell integration."
    createtmp
    cat << 'EOF' >> Uninstall.reg
    Windows Registry Editor Version 5.00
    [-HKEY_CURRENT_USER\Software\Classes\Directory\Background\shell\WLinux]
    [-HKEY_CURRENT_USER\Software\Classes\Directory\shell\WLinux]
EOF
    cp Install.reg $(wslupath -T)/Uninstall.reg
    cmd.exe /C "Reg import %TEMP%\Uninstall.reg"
    cleantmp
fi
}

### cloud tools

function azurecliinstall {
if (whiptail --title "AZURECLI" --yesno "Would you like to download and install optional Azure command line tools?" 8 85) then
    echo "Installing AZURECLI"
    createtmp
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
    sudo cp microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
    sudo chmod 644 /etc/apt/trusted.gpg.d/microsoft.gpg
    sudo bash -c "echo 'deb https://packages.microsoft.com/repos/azure-cli/ stretch main' >> /etc/apt/sources.list.d/azurecli.list"
    sudo apt update 
    sudo apt upgrade -y
    echo "Note: azure-cli install can appear to 'stall' at 16%, it is usually not broken, just taking a long time."
    sudo apt install azure-cli -y
    cleantmp
else
    echo "Skipping AZURECLI"
fi
}

# main

welcomeprompt
continueprompt
updatescriptprompt
securitypatches
installmenu
byemessage

exit 0
